name: Pull Request Workflow

on:
  pull_request:
    branches: [ main ]

jobs:
  test-and-report:
    name: Test and Report
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for PR comments

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Install uv
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      env:
        # Prevent the installer from modifying GitHub Actions environment files
        UV_BOOTSTRAP_SKIP_MODIFY_PATH: 1

    # Install dependencies using uv
    - name: Install dependencies
      run: |
        # Add uv to the PATH
        export PATH="$HOME/.cargo/bin:$PATH"
        # Create and activate venv
        uv venv .venv
        source .venv/bin/activate
        # Install project and dev dependencies
        uv pip install '.[dev]'

    - name: Run tests with coverage
      run: |
        # Add uv to the PATH (optional but safe)
        export PATH="$HOME/.cargo/bin:$PATH"
        # Activate venv
        source .venv/bin/activate
        python -m pytest tests/ --cov=code_agent --cov=cli_agent --cov-report=xml --cov-report=term --cov-fail-under=80

    - name: Generate Coverage Report
      run: |
        # Add uv to the PATH (optional but safe)
        export PATH="$HOME/.cargo/bin:$PATH"
        # Activate venv
        source .venv/bin/activate
        # Use a multi-line Python script instead of one-liners to avoid f-string backslash issues
        cat > generate_coverage.py << 'EOF'
        import xml.etree.ElementTree as ET

        # Parse coverage XML
        tree = ET.parse("coverage.xml")
        root = tree.getroot()

        # Calculate overall coverage
        overall_coverage = float(root.attrib["line-rate"]) * 100

        # Open report file
        with open("coverage_report.md", "w") as f:
            f.write("## Test Coverage Report\n")
            f.write(f"### Overall Coverage: {overall_coverage:.2f}%\n\n")
            f.write("| Module | Coverage |\n")
            f.write("| ------ | -------- |\n")

            # Add each package
            for pkg in root.findall(".//package"):
                pkg_name = pkg.attrib["name"]
                pkg_coverage = float(pkg.attrib["line-rate"]) * 100
                f.write(f"| {pkg_name} | {pkg_coverage:.2f}% |\n")
        EOF

        # Run the script
        python generate_coverage.py

    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Test Coverage Report

    - name: Create or update PR comment with coverage
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body-file: coverage_report.md
        edit-mode: replace

    - name: Run linting
      run: |
        # Add uv to the PATH (optional but safe)
        export PATH="$HOME/.cargo/bin:$PATH"
        # Activate venv (ruff should be installed via .[dev])
        source .venv/bin/activate
        python -m ruff check . --output-format=github
