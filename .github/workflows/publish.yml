name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.2.3, etc.

jobs:
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install Poetry
      run: |
        source .venv/bin/activate
        pip install poetry

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        poetry install --without dev

    - name: Build package
      # NOTE: Using poetry build here. While `uv build` exists, poetry build
      # directly uses the specified build backend (poetry-core) and is the
      # standard, stable method for building packages defined with Poetry.
      # Revisit using `uv build` if it matures further.
      run: |
        source .venv/bin/activate
        poetry build

    - name: Publish to PyPI
      # NOTE: Using poetry publish. Similar to building, this is the stable,
      # standard way to publish packages built with Poetry. `uv publish` is
      # newer/experimental. Sticking with Poetry here minimizes risk for releases.
      # Revisit using `uv publish` if it matures further.
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        source .venv/bin/activate
        poetry publish
