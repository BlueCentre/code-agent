name: Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      modules:
        description: 'Specific module to test (e.g., code_agent.tools.native_tools)'
        required: false
        default: 'code_agent'
        type: string

jobs:
  coverage-analysis:
    name: Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # We need the full history for PR analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry install --no-interaction
        python -m pip install --upgrade pip pytest pytest-cov
        python -m pip install -e .

    - name: Diagnostics
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Python packages:"
        find . -maxdepth 2 -name "__init__.py" | sort
        echo "Python version and path:"
        python --version
        echo $PYTHONPATH
        python -c "import sys; print(sys.path)"

    - name: Run tests for specific module
      if: github.event.inputs.modules != 'code_agent'
      run: |
        echo "Running tests for ${{ github.event.inputs.modules }} module only"
        export PYTHONPATH=$PWD
        python -m pytest tests/ --cov=${{ github.event.inputs.modules }} --cov-report=xml --cov-report=term --cov-fail-under=80 -v

    - name: Run tests with coverage (regular)
      if: github.event.inputs.modules == 'code_agent' && github.event_name != 'pull_request'
      run: |
        echo "Running tests for all modules"
        export PYTHONPATH=$PWD
        python -m pytest tests/ --cov=code_agent --cov=cli_agent --cov-report=xml --cov-report=term --cov-fail-under=80 -v

    - name: Run tests with coverage (pull request)
      if: github.event_name == 'pull_request'
      run: |
        # Run coverage for all packages
        export PYTHONPATH=$PWD
        python -m pytest tests/ --cov=code_agent --cov=cli_agent --cov-report=xml --cov-report=term --cov-fail-under=80 -v

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml

  coverage-report:
    name: SonarQube
    needs: coverage-analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Make extract_version.sh executable
        run: |
          chmod +x scripts/extract_version.sh

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(./scripts/extract_version.sh)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: SonarQube Scan (regular)
        uses: SonarSource/sonarqube-scan-action@v5
        if: github.event_name != 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}

      - name: SonarQube Scan (pull request)
        uses: SonarSource/sonarqube-scan-action@v5
        if: github.event_name == 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
          SONAR_SCANNER_OPTS: >
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.coverage.exclusions=tests/**/*
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.cpd.exclusions=tests/**/*
