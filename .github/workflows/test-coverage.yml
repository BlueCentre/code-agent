name: Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      modules:
        description: 'Specific module to test (e.g., code_agent.tools.native_tools)'
        required: false
        default: 'code_agent'
        type: string

jobs:
  coverage-analysis:
    name: Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # We need the full history for PR analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry install --no-interaction
        python -m pip install --upgrade pip pytest pytest-cov

    - name: Discover Python packages
      id: discover_packages
      run: |
        # Find all top-level Python packages in project root
        PACKAGES=$(find . -maxdepth 1 -type d -not -path "*/\.*" -not -path "./tests" -not -path "./scripts" -not -path "./venv" -not -path "./.venv" -name "*" -exec test -e "{}"/__init__.py \; -print | sed 's/.\///' | tr '\n' ' ')
        echo "Found packages: $PACKAGES"
        echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
        # Create coverage include pattern
        COVERAGE_INCLUDE=$(echo "$PACKAGES" | sed 's/ /,/g')
        echo "COVERAGE_INCLUDE=$COVERAGE_INCLUDE" >> $GITHUB_ENV

    - name: Create coverage runner script
      run: |
        cat > run_coverage.py << 'EOF'
        import subprocess
        import os
        import sys

        def run_specific_module_coverage(module_name):
            cmd = ['python', '-m', 'pytest', 'tests/',
                  f'--cov={module_name}',
                  '--cov-report=xml', '--cov-report=term', '--cov-fail-under=80']
            print(f"Running command: {' '.join(cmd)}")
            subprocess.run(cmd, check=True)

        def run_all_packages_coverage():
            packages = os.environ.get('PACKAGES', '').split()
            cmd = ['python', '-m', 'pytest', 'tests/']

            for pkg in packages:
                cmd.append(f'--cov={pkg}')

            cmd.extend(['--cov-report=xml', '--cov-report=term', '--cov-fail-under=80'])

            print(f"Running command: {' '.join(cmd)}")
            subprocess.run(cmd, check=True)

        def run_changed_modules_coverage(modules_file):
            with open(modules_file, 'r') as f:
                changed_modules = [line.strip() for line in f if line.strip()]

            if not changed_modules:
                print("No modules to test")
                return 0

            cmd = ['python', '-m', 'pytest', 'tests/', '--cov-context=test']

            for module in changed_modules:
                cmd.append(f'--cov={module}')

            cmd.extend(['--cov-report=xml:changed_coverage.xml', '--cov-report=term', '--cov-fail-under=80'])

            print(f"Running command: {' '.join(cmd)}")
            result = subprocess.run(cmd)
            return result.returncode

        if __name__ == "__main__":
            if len(sys.argv) < 2:
                print("Usage: python run_coverage.py [specific_module|all|changed] [module_name|modules_file]")
                sys.exit(1)

            mode = sys.argv[1]
            if mode == "specific_module":
                run_specific_module_coverage(sys.argv[2])
            elif mode == "all":
                run_all_packages_coverage()
            elif mode == "changed":
                exit_code = run_changed_modules_coverage(sys.argv[2])
                sys.exit(exit_code)
        EOF

    - name: Run tests for specific module
      if: github.event.inputs.modules != 'code_agent'
      run: |
        echo "Running tests for ${{ github.event.inputs.modules }} module only"
        python run_coverage.py specific_module ${{ github.event.inputs.modules }}

    - name: Run tests with coverage for all packages
      if: github.event.inputs.modules == 'code_agent' && github.event_name != 'pull_request'
      run: |
        echo "Running tests for all modules"
        python run_coverage.py all

    - name: Run tests with coverage for changed files
      if: github.event_name == 'pull_request'
      run: |
        # Get list of changed Python files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "\.py$" | grep -v "test_" | tr '\n' ' ')
        if [ -n "$CHANGED_FILES" ]; then
          echo "Changed Python files: $CHANGED_FILES"

          # Extract module paths from changed files (convert file paths to module paths)
          CHANGED_MODULES=$(echo "$CHANGED_FILES" | sed -E 's|/|.|g' | sed -E 's|\.py$||g' | sed -E 's|^\.|.|g' | tr ' ' '\n')
          echo "$CHANGED_MODULES" > changed_modules.txt

          # Run tests with coverage for changed modules
          python run_coverage.py changed changed_modules.txt

          if [ $? -eq 0 ]; then
            echo "NEW_CODE_COV_GENERATED=true" >> $GITHUB_ENV
          fi
        else
          echo "No Python files changed, skipping targeted coverage"
        fi

        # Run coverage for all packages
        python run_coverage.py all

    - name: Generate changed code coverage report
      if: github.event_name == 'pull_request' && env.NEW_CODE_COV_GENERATED == 'true'
      run: |
        python - << 'EOF'
        import xml.etree.ElementTree as ET

        # Parse changed code coverage XML
        tree = ET.parse("changed_coverage.xml")
        root = tree.getroot()

        # Calculate coverage for changed code
        changed_coverage = float(root.attrib["line-rate"]) * 100

        # Open report file
        with open("new_code_coverage.md", "w") as f:
            f.write("## New Code Coverage Report\n")
            f.write(f"### Changed Code Coverage: {changed_coverage:.2f}%\n\n")

            # Warning if coverage is below threshold
            if changed_coverage < 80:
                f.write("⚠️ **Warning: New code coverage is below the 80% threshold!**\n\n")

            f.write("| Module | Coverage | Status |\n")
            f.write("| ------ | -------- | ------ |\n")

            # Add each module
            for pkg in root.findall(".//package"):
                pkg_name = pkg.attrib["name"]
                pkg_coverage = float(pkg.attrib["line-rate"]) * 100
                status = "✅" if pkg_coverage >= 80 else "❌"
                f.write(f"| {pkg_name} | {pkg_coverage:.2f}% | {status} |\n")

            # Add detailed missing lines for modules below threshold
            f.write("\n### Missing Coverage Details\n\n")
            for pkg in root.findall(".//package"):
                pkg_name = pkg.attrib["name"]
                pkg_coverage = float(pkg.attrib["line-rate"]) * 100

                if pkg_coverage < 80:
                    f.write(f"#### {pkg_name}\n\n")
                    for cls in pkg.findall(".//class"):
                        cls_name = cls.attrib["name"]
                        missing_lines = []

                        for line in cls.findall(".//line"):
                            if line.attrib.get("hits") == "0":
                                missing_lines.append(line.attrib["number"])

                        if missing_lines:
                            f.write(f"- **{cls_name}**: Lines missing coverage: {', '.join(missing_lines)}\n")

        # Save changed coverage percentage to a file
        with open("changed_coverage_pct.txt", "w") as f:
            f.write(str(changed_coverage))
        EOF

        echo "CHANGED_COVERAGE_REPORT_GENERATED=true" >> $GITHUB_ENV

    - name: Check new code coverage threshold
      if: github.event_name == 'pull_request' && env.CHANGED_COVERAGE_REPORT_GENERATED == 'true'
      run: |
        CHANGED_COVERAGE=$(cat changed_coverage_pct.txt)
        echo "New code coverage: $CHANGED_COVERAGE%"

        if (( $(echo "$CHANGED_COVERAGE < 80" | bc -l) )); then
          echo "::error::New code coverage ($CHANGED_COVERAGE%) is below the 80% threshold!"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          changed_coverage.xml
          new_code_coverage.md

  coverage-report:
    name: SonarQube
    needs: coverage-analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Make extract_version.sh executable
        run: |
          chmod +x scripts/extract_version.sh

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(./scripts/extract_version.sh)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: SonarQube Scan (regular)
        uses: SonarSource/sonarqube-scan-action@v5
        if: github.event_name != 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}

      - name: SonarQube Scan (pull request)
        uses: SonarSource/sonarqube-scan-action@v5
        if: github.event_name == 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
          SONAR_SCANNER_OPTS: >
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.coverage.exclusions=tests/**/*
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.cpd.exclusions=tests/**/*
